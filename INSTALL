QGIS Django Project
This document describes the procedure for setting up the QGIS Django Project.
Tim Sutton 2010


------------------------------------------------------------------------

  1. For the terminally lazy
  2. Deploying a live site using wsgi
  3. Updating the search indexes
  4. Cache setup
  5. Feedjack Update


------------------------------------------------------------------------


  1. For the terminally lazy
  ==========================

For a readonly checkout do:


  sudo apt-get install libldap2-dev libsasl2-dev python-gdal
  git clone git@github.com:qgis/qgis-django.git
  cd qgis-django
  sudo easy_install virtualenv
  virtualenv --no-site-packages python
  source python/bin/activate
  pip install -r REQUIREMENTS.txt


Install some manual dependencies needed for django-snippets (make sure your
virtual env is active):


  git clone https://github.com/coleifer/django-amazon-resources.git
  cd django-amazon-resources/
  python setup.py install
  cd ..


Now install qgis snippets (a fork of django snippets)


  git clone git@github.com:qgis/qgis-snippets.git
  cd qgis-snippets
  python setup.py install
  cd ..

Important note: the server currently use python 2.5, due to some
strange incompatibilities between compressed egg format and Django
init machinery, in order to recognise "haystack" search stuff, the
cab EGG must be uncompressed such as the final directories (in the virtualenv)
are:

python/lib/python2.5/site-packages/cab-0.2.0-py2.5.egg/cab
python/lib/python2.5/site-packages/cab-0.2.0-py2.5.egg/EGG-INFO


  sudo apt-get install postgresql-8.4-postgis


Copy the settings template:


  cd qgis
  cp settings_local.py.templ settings_local.py


Then run the createdb script:


  ./createdb.sh


''Note:'' If you already have postgis installed in your template1 db,
just do the following command rather than running the createdb script:


  createdb qgis-trunk


''Note:'' Remember to source the activate script to enabled the python
virtual environment:


  source python/bin/activate


Modify settings_local.py to include the correct username and pwd for the
db connection.


  cd qgis
  python manage.py syncdb


Then run the project using the embedded test server:


  python manage.py runserver


Then point your browser at:


  http://localhost:8000



  2. Deploying a live site using wsgi
  ===================================


  cd /etc/apache/sites-available
  sudo cp <path to qgis-django>/apache/apache.virtenv.conf.example qgis-django.conf


Now modify qgis-django.conf to your needs (making sure paths and web url are correct) then:


  sudo a2ensite qgis-django.conf
  sudo /etc/init.d/apache2 reload



  3. Updating the search indexes
  ==============================

The haystack search indexes should be created after initial install:


  python manage.py create_index


There after they should be updated regularly e.g. using a 5 min cron job:


  python manage.py update_index



  4. Cache setup
  ==============

We will use database based caching here (see http://docs.djangoproject.com/en/dev/topics/cache/ | django (caching)).

Make sure your virtual env is set up and then create a cache table:


  python manage.py createcachetable cache_table


NOTE: The cache backend is required for the planet / feedjack to work properly


  5. Feedjack Update
  ==================

The Blog Planet requires feedjack_update.py to run at regular intervals to keep
the site fresh. The update_planet.sh shell script sets up the environment and
runs feedjack_update.py.

The script requires you to set SITE_DIR to point at the Django site directory prior to first use.

The script must be run by a user that has permissions to the site directory.

To install as a cron, use the following (adjust the paths for your site):


    */2 * * * * /home/web/qgis-django/update_planet.sh 1>>/tmp/planet_update.log 2>>/tmp/planet_update.err

  6. Pootle Installation
  ======================
  
Pootle is included in the qgis-django project as a git submodule.
To replicate the structure, we can include it in the same manner in the git 
project::

   git submodule add git@github.com:capooti/pootle.git pootle
   git submodule
   git submodule init pootle
   git submodule update pootle
   git status
   git commit -m "Import pootle as a git submodule" -a
   git push

To obtain updates to the pootle submodule, the procedure is:

   cd <your sphinx project>/pootle
   git pull
   cd ..

Then commit the fact that the submodule now tracks a different SHA1::

   git commit -am "Updates pootle to latest version"



